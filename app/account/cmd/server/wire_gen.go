// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-pantheon/fabrica-net/http/health"
	biz2 "github.com/go-pantheon/lares/app/account/internal/admin/biz"
	data3 "github.com/go-pantheon/lares/app/account/internal/admin/data"
	v1_2 "github.com/go-pantheon/lares/app/account/internal/admin/service/v1"
	"github.com/go-pantheon/lares/app/account/internal/conf"
	"github.com/go-pantheon/lares/app/account/internal/data"
	"github.com/go-pantheon/lares/app/account/internal/http/biz"
	data2 "github.com/go-pantheon/lares/app/account/internal/http/data"
	"github.com/go-pantheon/lares/app/account/internal/http/domain"
	"github.com/go-pantheon/lares/app/account/internal/http/service/v1"
	"github.com/go-pantheon/lares/app/account/internal/server"
)

// Injectors from wire.go:

func initApp(confServer *conf.Server, label *conf.Label, registry *conf.Registry, confData *conf.Data, platform *conf.Platform, logger log.Logger, healthServer *health.Server) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	accountRepo, err := data2.NewAccountData(dataData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountDomain := domain.NewAccountDomain(logger, accountRepo)
	usernameDomain := domain.NewUsernameDomain(logger, accountRepo)
	googleDomain, err := domain.NewGoogleDomain(logger, label, platform, accountRepo)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	appleDomain, err := domain.NewAppleDomain(logger, label, platform, accountRepo)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	facebookDomain, err := domain.NewFacebookDomain(logger, label, platform, accountRepo)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountUseCase, err := biz.NewAccountUseCase(logger, accountDomain, usernameDomain, googleDomain, appleDomain, facebookDomain)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountInterface := v1.NewAccountInterface(logger, accountUseCase)
	bizAccountRepo := data3.NewAccountData(dataData, logger)
	bizAccountUseCase := biz2.NewAccountUseCase(bizAccountRepo, logger)
	accountAdmin := v1_2.NewAccountAdmin(logger, bizAccountUseCase)
	httpServer := server.NewHTTPServer(label, confServer, logger, accountInterface, accountAdmin)
	grpcServer := server.NewGRPCServer(confServer, logger, accountAdmin)
	registrar, err := server.NewRegistrar(registry)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(logger, httpServer, grpcServer, healthServer, label, registrar)
	return app, func() {
		cleanup()
	}, nil
}
